(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1083:function(module,exports,__webpack_require__){"use strict";__webpack_require__(4),__webpack_require__(52),__webpack_require__(41),__webpack_require__(33),__webpack_require__(43),__webpack_require__(1084),__webpack_require__(1085),__webpack_require__(6),__webpack_require__(42);var _clientApi=__webpack_require__(56),_clientLogger=__webpack_require__(36),_configFilename=__webpack_require__(1086);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),_configFilename.loaders&&_configFilename.loaders.forEach((function(loader){return(0,_clientApi.addLoader)(loader,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},1086:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"parameters",(function(){return parameters}));var parameters={actions:{argTypesRegex:"^on[A-Z].*"}}},1087:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(357).configure)([__webpack_require__(1088),__webpack_require__(1089)],module,!1)}).call(this,__webpack_require__(107)(module))},1088:function(module,exports,__webpack_require__){var map={"./notes/storybook/sb-csf-mdx.stories.mdx":1094,"./notes/storybook/sb-notes.stories.mdx":1095,"./notes/storybook/sb-publish.stories.mdx":1096,"./notes/storybook/sb-setup.stories.mdx":1097};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1088},1089:function(module,exports){function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=function(){return[]},webpackEmptyContext.resolve=webpackEmptyContext,module.exports=webpackEmptyContext,webpackEmptyContext.id=1089},1094:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(13),__webpack_require__(3),__webpack_require__(6),__webpack_require__(0);var esm=__webpack_require__(17),blocks=__webpack_require__(29);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(esm.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.mdx)(blocks.Meta,{title:"Storybook/Docs/CSF & MDX",parameters:{docs:{container:function container(_ref2){var children=_ref2.children,context=_ref2.context;return Object(esm.mdx)(blocks.DocsContainer,{context:context,mdxType:"DocsContainer"},Object(esm.mdx)("div",{style:{padding:"0 3rem"}},children))}}},mdxType:"Meta"}),Object(esm.mdx)(blocks.Description,{mdxType:"Description"},"# Storybook\r\n\r\n### CSF & MDX   \r\n\r\n<hr/>\r\n<br/>\r\n\r\n#### what is the relationship between .stories.js (csf) and .stories.mdx (mdx)?\r\nComponent Story Format (CSF)\r\n\r\n### Articles:\r\n[storybook docs recipes](https://github.com/storybookjs/storybook/blob/master/addons/docs/docs/recipes.md#csf-stories-with-mdx-docs)   \r\n*_powerful article_*\r\n\r\nthis readme describes the process of coverting between the two formats\r\n[Storybook Codemods](https://github.com/storybookjs/storybook/blob/next/lib/codemod/README.md)   \r\n\r\n[storybook controls docs](https://storybook.js.org/docs/react/essentials/controls)   \r\n\r\n  - which one takes priority?\r\n  - which one is not needed?\r\n  - if im using mainly .mdx how much of the .stories.js do i need to add?\r\n\r\n### Using straight markdown (sort of)\r\n\r\n[MDX transclusion](https://mdxjs.com/getting-started#documents)   \r\n[the gatekeepers hint](https://github.com/storybookjs/storybook/issues/10209)   \r\n\r\n> The current workaround is not awful, but involves more code than neccesary:  ????\r\n\r\n#### adding .md to an mdx file\r\n\r\n```\r\n  import { Description } from '@storybook/addon-docs/blocks';\r\n  import Readme from '.README.md';\r\n\r\n  <Meta title=\"Documentation|Readme\" />\r\n\r\n  <Description>{Readme}</Description>\r\n```\r\n**works**\r\n**GOTCHA: the only difference (miniscule and also major/required) is that all code blocks have to be separated from their headings with an newline**\r\n\r\n#### nameing with a category\r\n\r\n```\r\n  <Meta title=\"Documentation/Readme\" />\r\n```\r\n> use a '/' instead of '|'\r\n\r\n#### naming to create a collapsible folder\r\n\r\n```\r\n  <Meta title=\"Documentation/docs/Readme\" />\r\n```\r\n\r\n> add a third section to the title and storybook creates a collapsible folder for all related materials\r\n"))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"Storybook/Docs/CSF & MDX",parameters:{docs:{container:function container(_ref3){var children=_ref3.children,context=_ref3.context;return Object(esm.mdx)(blocks.DocsContainer,{context:context},Object(esm.mdx)("div",{style:{padding:"0 3rem"}},children))}}},includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(esm.mdx)(blocks.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(esm.mdx)(MDXContent,null))}});__webpack_exports__.default=componentMeta},1095:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(13),__webpack_require__(3),__webpack_require__(6),__webpack_require__(0);var esm=__webpack_require__(17),blocks=__webpack_require__(29);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(esm.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.mdx)(blocks.Meta,{title:"Storybook/Docs/Notes",parameters:{docs:{container:function container(_ref2){var children=_ref2.children,context=_ref2.context;return Object(esm.mdx)(blocks.DocsContainer,{context:context,mdxType:"DocsContainer"},Object(esm.mdx)("div",{style:{padding:"0 3rem"}},children))}}},mdxType:"Meta"}),Object(esm.mdx)(blocks.Description,{mdxType:"Description"},'# Storybook\r\n\r\n### Notes\r\n\r\n<hr/>\r\n\r\n### Articles\r\n[learn Storybook - online books/tutorial articles](https://www.learnstorybook.com/)   \r\n[Documentation for stakeholders](https://www.learnstorybook.com/design-systems-for-developers/react/en/document/)   \r\n\r\n#### Getting started\r\n- navigate to directory and run\r\n\r\n```\r\n  npx create-react-app react-storybook-v6\r\n```\r\n\r\n- navigate into storybook directory\r\n\r\n```\r\n  cd react-storybook-v6\r\n```\r\n\r\n- install and initialize storybook\r\n\r\n```\r\n  npx sb init\r\n```\r\n\r\n#### all init installs\r\n- install dependencies:\r\n\r\n```\r\n  npm i react react-dom sass\r\n```\r\n\r\n- install devDependencies\r\n\r\n```\r\n  npm i -D @storybook/addon-a11y @storybook/addon-console css-loader sass-loader style-loader\r\n```\r\n\r\n#### creating stories\r\n_Button.stories.js_\r\n\r\n```\r\n  import React from \'react\';\r\n  import Button from \'./Button\';\r\n\r\n  export default {\r\n    title: \'Button\',/*mandatory and should be unique throughout entire project*/\r\n    component: Button\r\n  }\r\n\r\n  export const Primary = () => <Button variant="primary">Primary</Button>\r\n```\r\n**requires at least one named export**\r\n\r\n```\r\n  const Comp = {\r\n    title: \'Button\',\r\n    component: Button\r\n  }\r\n\r\n  export default Comp;\r\n```\r\n**better syntax avoids no-anonymous defaults warning**\r\n\r\n#### specify the named exports\r\n> every named export represents a \'story\'\r\n> a menu item is created for each of the named exports\r\n> a named export is basically a react component\r\n\r\n> without at least one of these exports the story is completely empty - there isn\'t even a button section in the docs   \r\n\r\nButton.stories.js\r\n\r\n```\r\n  export const Primary = () => <Button variant="primary">Primary</Button>\r\n  export const Secondary = () => <Button variant="secondary">Secondary</Button>\r\n  export const Success = () => <Button variant="success">Success</Button>\r\n  export const Danger = () => <Button variant="danger">Danger</Button>\r\n```\r\n\r\n#### group stories (4.1)\r\n> can be \'Form/componentName\' or \'form/componentName\'. can also be \'group/subGroup/componentName\'   \r\n\r\nButton.stories.js\r\n\r\n```\r\n  // i can group stories\r\n\r\n  export default {\r\n    title: \'form/Button\',\r\n    component: Button\r\n  }\r\n```\r\n\r\n\r\n#### Renaming stories (4.2)\r\nButton.stories.js\r\n\r\n```\r\n  ...\r\n  export const Primary = () => <Button variant="primary">Primary</Button>\r\n\r\n  Primary.storyName = "Primary Button";// renaming stories\r\n```\r\n\r\nthe renaming convention:\r\n\r\n```\r\n  Primary.storyName = "Primary Button";// renaming stories\r\n\r\n  // the formula\r\n  // namedExport.storyName = "new name string"\r\n```\r\n\r\n#### [to alphabetize the stories](https://storybook.js.org/docs/react/writing-stories/naming-components-and-hierarchy)   \r\ngot to the docs and find section:\r\n\r\n**Sorting stories**\r\n>By default, stories are sorted in the order in which they were imported. This can be overridden by adding storySort to the options parameters in your preview.js file.\r\n\r\n>The most powerful method of sorting is to provide a function to storySort. Any custom sorting can be achieved with this method.\r\n\r\n```\r\n// .storybook/preview.js\r\n\r\nexport const parameters = {\r\n  options: {\r\n    storySort: (a, b) =>\r\n      a[1].kind === b[1].kind ? 0 : a[1].id.localeCompare(b[1].id, undefined, { numeric: true }),\r\n  },\r\n};\r\n```\r\n\r\ncopy options portion:\r\n\r\n```\r\n  options: {\r\n    storySort: (a, b) =>\r\n      a[1].kind === b[1].kind ? 0 : a[1].id.localeCompare(b[1].id, undefined, { numeric: true }),\r\n  },\r\n```\r\n\r\npaste after the actions property in\r\n.storybook/preview.js\r\n\r\n```\r\n  export const parameters = {\r\n    actions: { argTypesRegex: "^on[A-Z].*" },\r\n    options: {\r\n      storySort: (a, b) =>\r\n        a[1].kind === b[1].kind ? 0 : a[1].id.localeCompare(b[1].id, undefined, { numeric: true }),\r\n    },\r\n  }\r\n```\r\n\r\n#### story within a story (4.3)\r\n/Subscription/Subscription.stories.js\r\n\r\n```\r\n  // a story of stories\r\n  import React from \'react\';\r\n\r\n  // don\'t import the components, import the stories we have written for the components\r\n  import {Primary} from \'../components/Button/Button.stories\';\r\n  import {Large} from \'../components/Input/Input.stories\';\r\n\r\n  const Story = {\r\n    title: \'form/Subscription\',\r\n  }\r\n\r\n  export default Story;\r\n\r\n  // named export\r\n  export const PrimarySubscription = () => (\r\n    <>\r\n      <Large />\r\n      <Primary />\r\n    </>\r\n  )\r\n```\r\n\r\n#### Args mechanism (4.4)\r\n\r\nButton.stories.js\r\n\r\n```\r\n  // args mechanism\r\n  const Template = args => <Button {...args} />\r\n\r\n  // export 1 or more stories using this Template\r\n\r\n  // create a story using the primary variant of the button\r\n  export const PrimaryA = Template.bind({});\r\n  PrimaryA.args = {\r\n    variant:"primary",\r\n    children:"Primary Args"\r\n  }\r\n\r\n          // you can import args fromo another template\r\n          export const LongPrimaryA = Template.bind({});\r\n          LongPrimaryA.args = {\r\n            ...PrimaryA.args,\r\n            children: "Long Primary Args"\r\n          }\r\n\r\n  export const SecondaryA = Template.bind({});\r\n  SecondaryA.args = {\r\n    variant: "secondary",\r\n    children: "Secondary Args"\r\n  }\r\n```\r\n\r\nyou can also specify args at the component level (default export level)\r\nButton.stories.js\r\n\r\n```\r\n    const Story = {\r\n      title: \'form/Button\',/*mandatory and should be unique throughout entire project*/\r\n      component: Button,\r\n      decorators: [story => <Center>{story()}</Center>],\r\n      args: {\r\n        children: "Button"\r\n      }\r\n    }\r\n\r\n    export default Story;\r\n\r\n    export const PrimaryA = Template.bind({});\r\n    PrimaryA.args = {\r\n      variant:"primary",\r\n      // children:"Primary Args"// comment out children prop or remove\r\n    }\r\n\r\n              // you can import args fromo another template\r\n              export const LongPrimaryA = Template.bind({});\r\n              LongPrimaryA.args = {\r\n                ...PrimaryA.args\r\n              }\r\n\r\n    export const SecondaryA = Template.bind({});\r\n    SecondaryA.args = {\r\n      variant: "secondary",\r\n      children: "Secondary Args"\r\n    }\r\n```\r\n**all Templates will have the same children arg unless there is a local declaration of that arg (has \'specificity\')**   \r\n\r\n> the args at the story lvl will overwrite args at the component level\r\n\r\n#### adding decorators (5.0)\r\n> you want to add components that help decorate the display. but you want to keep the code DRY\r\n\r\n```\r\n  export const Primary = () => <Center><Button variant="primary">Primary</Button></Center>\r\n  export const Secondary = () => <Center><Button variant="secondary">Secondary</Button></Center>\r\n  export const Success = (  ) => <Center><Button variant="success">Success</Button></Center>\r\n  export const Danger = () => <Center><Button variant="danger">Danger</Button></Center>\r\n```\r\n*_not like this_*\r\n\r\nuse a decorator\r\n\r\n```\r\n  export default {\r\n    title: \'form/Button\',/*mandatory and should be unique throughout entire project*/\r\n    component: Button,\r\n    decorators: [story => <Center>{story()}</Center>]\r\n  }\r\n\r\n  prevents having to do this\r\n```\r\n**decorators use a hoc style script to wrap all your components in a component**\r\n\r\n#### adding global decorators\r\n\r\n.storybook/preview.js\r\n\r\n```\r\n  import React from \'react\';\r\n  import {addDecorator} from \'@storybook/react\';\r\n  import Center from \'../src/components/Center\';\r\n\r\n  addDecorator(story => <Center>{story()}</Center>);\r\n\r\n  export const parameters = {\r\n  ...\r\n\r\n```\r\n\r\nalternative decorator (v6)\r\n\r\n```\r\n  // addDecorator(story => <Center>{story()}</Center>);// pre-themed\r\n\r\n  // v6 lets me use multiple decorators in an array of decorators - the theme is still not working\r\n  export const decorators = [\r\n    story => <ChakraProvider>{story()}</ChakraProvider>,\r\n    story => <Center>{story()}</Center>\r\n  ]\r\n```\r\n\r\n#### Theming (6.1 & 6.2) **failed**\r\n[Chakra theming library](chakra-ui.com)   \r\n\r\n[install chakra](https://chakra-ui.com/docs/getting-started)   \r\ncopy paste code snippet\r\n\r\n```\r\n  npm i @chakra-ui/react @emotion/react @emotion/styled framer-motion\r\n```\r\n\r\n#### addons (7.1)\r\n[storybook addons](https://github.com/storybookjs/storybook/tree/master/addons)   \r\n[Supercharge Storybook](https://storybook.js.org/addons)   \r\n - controls add on lets you dynamically change props for components (args)\r\n  **works with template and args**\r\n\r\n```\r\n  SecondaryA.args = {\r\n    variant: "secondary",\r\n    children: "Secondary Args"\r\n  }\r\n```\r\n\r\nwhen this was still being bugfixed you may have needed to add argTypes to the Story default component\r\n> the work around\r\n\r\n```\r\n  export default {\r\n    title: \'form/Button\',/*mandatory and should be unique throughout entire project*/\r\n    component: Button,\r\n    decorators: [story => <Center>{story()}</Center>],\r\n    argTypes:{\r\n      variantColor:{\r\n        control:"text"\r\n      }\r\n    }\r\n  }\r\n\r\n  // specifically adding this\r\n  argTypes:{\r\n    variantColor:{\r\n      control:"text"\r\n    }\r\n  }\r\n```\r\n\r\n#### actions\r\nadding an onclick action\r\n\r\n```\r\n    const Comp = {\r\n      title: \'form/Button\',/*mandatory and should be unique throughout entire project*/\r\n      component: Button,\r\n      /* decorators: [story => <Center>{story()}</Center>],*/\r\n      args: {\r\n        children: "Button"\r\n      },\r\n      argTypes:{\r\n        onClick:{action: "clicked"}\r\n      }// works\r\n    }\r\n```\r\n**seems to only work in the default export component ()\r\n\r\nadding actions without argTypes\r\n\r\n```\r\n  export const Primary = () => <Button onClick={action("Click handler")} variant="primary">Primary</Button>\r\n```\r\n\r\nadding to args templates without argTypes\r\n\r\n```\r\n    export const SecondaryA = Template.bind({});\r\n    SecondaryA.args = {\r\n      variant: "secondary",\r\n      children: "Secondary Args",\r\n      //onClick:{action: "clicked"}// fails - becomes an arg which can be modified by controls\r\n      // onClick:{action: function(){action("secondary click")}}//failed\r\n      // onClick:()=>{action("secondary click")}//failed\r\n      onClick:action("secondary click")// somehow this works\r\n    }\r\n```\r\n\r\ncapture multiple events - use actions export on the addon\r\n\r\n```\r\n  export const Success = () => <Button {...actions("onClick","onMouseOver")} variant="success">Success</Button>\r\n```\r\n**spread operator actions - displays events as eventName**\r\n\r\n#### Logs\r\n> adds console logs to actions tab\r\n\r\n```\r\n  export const Danger = () => <Button onClick={() => {console.log("danger clicked");}} variant="danger">Danger</Button>\r\n```\r\n**this is a natural fn of react - not storybook**\r\n\r\nlog in storybook w/o using the devtools log\r\n\r\ninstall the plugin\r\n\r\n```\r\n  npm i -d @storybook/addon-console\r\n\r\n```\r\n\r\nthen add it to the story\r\n\r\n```\r\n  // with no objects extracted\r\n  import "@storybook/addon-console";\r\n```\r\n**once this is done the same console.log that is set above on the Danger button will now appear in the actions panel**\r\n\r\nto add an enhancement printing the story information where the log statement is from\r\n(done in/with decorators)\r\n\r\n.storybook/preview.js\r\n\r\n```\r\n  // this time with object extraction\r\n  import {withConsole} "@storybook/addon-console";\r\n\r\n  ...\r\n\r\n  export const decorators = [\r\n    story => <ChakraProvider>{story()}</ChakraProvider>,\r\n    story => <Center>{story()}</Center>,\r\n\r\n\r\n    (story, context) => withConsole()(story)(context)\r\n\r\n\r\n  ]\r\n```\r\n// returns: form/Button/Danger: (1) ["danger clicked"]\r\n\r\n#### the docs addon **(docs is already added by default in v6)**\r\n[writing docs introduction](https://storybook.js.org/docs/react/writing-docs/introduction)   \r\n[storybook docspage](https://github.com/storybookjs/storybook/blob/master/addons/docs/docs/docspage.md)   \r\n[writing docs docspage](https://storybook.js.org/docs/react/writing-docs/docs-page)   \r\n[storybook docs recipes](https://github.com/storybookjs/storybook/blob/master/addons/docs/docs/recipes.md#csf-stories-with-mdx-docs)   \r\n**see li: 686 mdx format**\r\ninstall it\r\n\r\n```\r\n  npm i -d @storybook/addon-docs\r\n```\r\nthen add it to the .storybook/main.js addons - deprecated\r\n**its a pretty large plugin**\r\n\r\n\r\n### the knobs addon (controls in v6)\r\ngoogle search: storybook knobs vs controls\r\n[Storybook Controls - Live edit UI components with no code](https://medium.com/storybookjs/storybook-controls-ce82af93e430)   \r\narticle sample\r\n\r\n```\r\n  import { Button } from \'@storybook/react/demo\';\r\n\r\n  export default {\r\n    title: \'Button/Controls\',\r\n    component: Button\r\n  };\r\n\r\n  export const Basic = (args) => <Button {...args} />;// looks like Template setup\r\n  Basic.args = { children: \'hello\' };// also same as Template the without the .bind({}) step\r\n```\r\n\r\nmy sample\r\n\r\n```\r\n  export const knobsTest = args => <Button {...args} />// looks the same as the rest of the story setups only with a parameter\r\n  knobsTest.args = {\r\n    variant:"primary"\r\n  }\r\n```\r\n**works**\r\n\r\n// how do i use other forms of inputs in controls?\r\n[storybook docs - controls: choosing control types](https://storybook.js.org/docs/react/essentials/controls)   \r\n\r\n\r\n#### A11y accessibility addon\r\ninstallation\r\n\r\n```\r\n  npm i -d @storybook/addon-a11y\r\n```\r\n\r\nthen add to addons in main.js\r\n\r\n```\r\n  module.exports = {\r\n    "stories": [\r\n      "../src/**/*.stories.mdx",\r\n      "../src/**/*.stories.@(js|jsx|ts|tsx)"\r\n    ],\r\n    "addons": [\r\n      "@storybook/addon-links",\r\n      "@storybook/addon-essentials",\r\n      "@storybook/preset-create-react-app",\r\n\r\n\r\n      "@storybook/addon-a11y"\r\n\r\n\r\n    ]\r\n  }\r\n```\r\n**for once this was necessary (required)**\r\n\r\nadd to decorators\r\n\r\n```\r\n  import {withA11y} from \'@storybook/addon-a11y\'\r\n\r\n  export const decorators = [\r\n    story => <ChakraProvider>{story()}</ChakraProvider>,\r\n    story => <Center>{story()}</Center>,\r\n    (story, context) => withConsole()(story)(context),\r\n\r\n\r\n    (story) => withA11y(story)\r\n\r\n  ]\r\n```\r\n**works**\r\n\r\n#### storysource - source code addon\r\n\r\n```\r\n  npm i -D @storybook/addon-storysource\r\n```\r\n\r\n```\r\n  "addons": [\r\n    ...\r\n    "@storybook/addon-storysource"\r\n    }// storysource addon\r\n  ...\r\n\r\n    // or\r\n\r\n  "addons": [\r\n    "@storybook/addon-links",\r\n    "@storybook/addon-essentials",\r\n    "@storybook/preset-create-react-app",\r\n\r\n    {\r\n      name: \'@storybook/addon-storysource\',\r\n      options: {\r\n        rule: {\r\n          // test: [/\\.stories\\.jsx?$/], This is default\r\n          include: [path.resolve(__dirname, \'../src\')], // You can specify directories\r\n        },\r\n        loaderOptions: {\r\n          prettierConfig: { printWidth: 80, singleQuote: false },\r\n          injectStoryParameters: false\r\n        },\r\n      },\r\n    }// storysource addon\r\n  ...\r\n\r\n```\r\n\r\n**GOTCHA: storysource not showing source code**\r\n[@storybook/addon-storysource v6.1.10 | docs](https://npm.io/package/@storybook/addon-storysource)   \r\n\r\n**Displaying full source**\r\n> Storybook 6.0 introduced an unintentional change to source-loader, in which only the source of the selected story is shown in the addon. To restore the old behavior, pass theinjectStoryParameters: false option.\r\n\r\n```\r\n  module.exports = {\r\n  addons: [\r\n    {\r\n      name: \'@storybook/addon-storysource\',\r\n      options: {\r\n        loaderOptions: {\r\n          injectStoryParameters: false,\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n```\r\n\r\n#### [Writing Docs MDX](https://storybook.js.org/docs/react/writing-docs/mdx)   \r\n[Storybook Docs Recipes](https://github.com/storybookjs/storybook/blob/master/addons/docs/docs/recipes.md#csf-stories-with-mdx-docs)   \r\n**see li: 686 mdx format**\r\n\r\n\r\n### Essentials are zero config\r\n[Storybook essentials introduction](https://storybook.js.org/docs/react/essentials/introduction)   \r\n\r\n>Configuration\r\nEssentials is "zero config”, it comes with a recommended configuration out of the box.\r\n\r\n>If you need to reconfigure any of the essential addons, install it manually, following the installation instructions and adjust the configuration to your needs.\r\n\r\n>When you start Storybook, Essentials will override its configuration with your own.\r\n\r\n\r\n#### Storybook does recognize jsDoc "style" comments\r\n**but not as jsDoc comments - it only creates a regular comment**\r\n\r\n#### default ArgsTable\r\n\r\n```\r\n  const Button = ({variant = "primary", children, ...rest}) => {\r\n    // const {variant = "primary", children, ...rest} = props;\r\n    return (\r\n      <button className={`button ${variant}`} {...rest}>\r\n        {children}\r\n      </button>\r\n    )\r\n  }\r\n```\r\n> if props is deconstructed to display its specific arguments (not children or spread into ...rest)\r\nstorybook will display the various props ("arguments") in a table on the docs page.\r\n\r\n- to get more detailed tables use prop-types in the stories\r\n\r\n#### PropTypes also work right out the box (no npm install)\r\n\r\n```\r\n  import PropTypes from \'prop-types\';\r\n\r\n  const Button = ({variant = "primary", isDisabled = false, children, ...rest}) => {\r\n    ...\r\n  }\r\n\r\n  Button.propTypes = {\r\n    /**\r\n     Checks if the button should be disabled\r\n    */\r\n    isDisabled: PropTypes.bool.isRequired,\r\n    /**\r\n    The display content of the button\r\n    */\r\n    content: PropTypes.string.isRequired,\r\n  };\r\n\r\n  export default Button;\r\n```\r\n> variant is still included in the ArgsTable along with the more descriptive propTypes ()\r\n> defaults must be added natrually to the prop desctructuring to work\r\n> if you add a default the property looses its "isRequired" proptype even if you set it explicitly\r\n\r\n**GOTCHA: ComponentName.propTypes script has to be above the export not below (error)**\r\n\r\n#### [ArgsTable](https://storybook.js.org/docs/react/writing-docs/doc-blocks#argstable)   \r\n[Customizing the ArgsTable](https://storybook.js.org/docs/react/writing-docs/doc-blocks#customizing)   \r\n\r\n```\r\n  const Comp = {\r\n    title: \'form/Button\',/*mandatory and should be unique throughout entire project*/\r\n    component: Button,\r\n    /* decorators: [story => <Center>{story()}</Center>],*/\r\n    args: {\r\n      children: "Button"\r\n    },\r\n    argTypes:{\r\n      variant: {\r\n        description: \'overwritten description\',\r\n        table: {\r\n          type: {\r\n              summary: \'something short\',\r\n              detail: \'something really really long\'\r\n          },\r\n        }\r\n      },\r\n      onClick:{action: "clicked"}\r\n    }// works\r\n  }\r\n```\r\n**failed on docs - maybe it needs a working .mdx file - shows in Canvas > Controls**\r\n\r\n#### ArgsTable of= vs story=\r\n\r\n```\r\n// variant with additional details - used only in story= (not of=)\r\n  argTypes:{\r\n    variant: {\r\n      description: \'overwritten description\',\r\n      table: {\r\n        type: {\r\n            summary: \'something short\',\r\n            detail: \'something really really long\'\r\n        },\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  <ArgsTable of={DivTag} />\r\n  <ArgsTable story={"Secondary"} />\r\n```\r\nof is more generic - it doesn\'t give you control nor does it show additional any details\r\n\r\n#### ArgsTable using categories\r\n\r\n```\r\n  <Canvas>\r\n  <Story name="Template"\r\n    args={{children:"DivTag"}}\r\n    argTypes={{\r\n      data:{\r\n        table:{category:"data"}\r\n      },\r\n      variant: {\r\n        table: {category:"css class"}\r\n      }\r\n    }}\r\n  >\r\n    {Template.bind({})}\r\n  </Story>\r\n```\r\n**now i need to find out how to make them start collapsed**\r\n\r\nuse argTypes to set defaultValue\r\n\r\n```\r\n  <Meta\r\n    title="form/Button"\r\n    component={Button}\r\n    argTypes={{\r\n      variant: {defaultValut:"primary"}\r\n    }}\r\n  />\r\n\r\n  <Story name="Template"\r\n    args={{children:"DivTag"}}\r\n    argTypes={{\r\n      data:{control:{type:"object"}},\r\n      content:{defaultValue:"some value"}\r\n    }}\r\n  >\r\n    {Template.bind({})}\r\n  </Story>\r\n```\r\n\r\n#### [Adding an .mdx file (mdx format)](https://storybook.js.org/docs/react/api/mdx)   \r\n**basic example works**\r\n\r\n```\r\n  \x3c!--- MyComponent.stories.mdx --\x3e\r\n  import { Meta, Story, Canvas, Description, ArgsTable } from \'@storybook/addon-docs/blocks\';\r\n  import Button from \'./Button\'\r\n\r\n  <Meta\r\n    title="form/Button"\r\n    component={Button}\r\n    argTypes={{\r\n      variant: "primary"\r\n    }}\r\n  />\r\n\r\n  <ArgsTable of={Button} />\r\n\r\n  <Story name="Mdxer2">\r\n    <Button variant="secondary">Secondary</Button>\r\n  </Story>\r\n```\r\n**this basic .mdx file works and given the same name as the stories.js file will overwrite it. otherwise its in addition to it**\r\n\r\n**GOTCHA: argTypes property in Meta is doing nothing**\r\n\r\n```\r\n  <Description markdown={"\r\n    ## Custom description\r\n\r\n    Insert fancy markdown here.\r\n  "}/>\r\n```\r\nall variations of using markdown in Description failed\r\n\r\n#### [Adding controls to mdx](https://storybook.js.org/docs/react/essentials/controls)   \r\n\r\n```\r\n  import { Meta, Story, Canvas, Description, ArgsTable } from \'@storybook/addon-docs/blocks\';\r\n  import Button from \'./Button\'\r\n\r\n  export const Template = args => <Button {...args} />\r\n\r\n  <Meta\r\n    title="MDX"\r\n    component={Button}\r\n    argTypes={{\r\n      children: {control:"text"},\r\n      variant: {control: "text"}\r\n      data:{control:"object"},\r\n      content:{control:"none"}\r\n    }}\r\n  />\r\n\r\n  ## Adding controls to mdx\r\n  <Story name="Template"\r\n    args={{children:"button"}}\r\n  >\r\n    {Template.bind({})}\r\n  </Story>\r\n```\r\n**setting the meta specifies what type of control input to give the user**\r\n**defaults can be added in individual story\'s args prop if defaults are not given in the component itself**\r\n**i can add control:"none" to get rid of controls i don\'t want to update\r\n\r\ncan also be added directly to the story to avoid adding to stories that aren\'t editable\r\n\r\n```\r\n  <Story name="Template"\r\n    args={{children:"DivTag"}}\r\n    argTypes={{\r\n      data:{control:{type:"object"}}\r\n    }}\r\n  >\r\n    {Template.bind({})}\r\n  </Story>\r\n```\r\n**GOTCHA: objects must be in full (perfect) json format - no shortcuts e.x: {"style":{"border":"5px solid red"}}**\r\n\r\n```\r\n  {"style":{"border":"5px solid red","backgroundColor":"black","color":"gold"}}\r\n```\r\n\r\n#### [Controlling the show code section using parameters](https://storybook.js.org/docs/react/writing-docs/doc-blocks#docspage-1)   \r\n\r\n```\r\n  ## Adding controls to mdx\r\n  // variant with code string\r\n  <Canvas>\r\n  <Story name="Template"\r\n    args={{children:"DivTag"}}\r\n    argTypes={{\r\n      data:{control:{type:"object"}},\r\n    }}\r\n    parameters={{docs: {\r\n      source: {code:"show this code"}\r\n    }}}\r\n  >\r\n    {Template.bind({})}\r\n  </Story>\r\n  </Canvas>\r\n\r\n  // variant with type\r\n  <Canvas>\r\n    <Story name="Secondary"\r\n      parameters={{docs: {\r\n        source: {type: "code"}\r\n      }}}\r\n    >\r\n      <DivTag variant="secondary">Secondary</DivTag>\r\n    </Story>\r\n  </Canvas>\r\n```\r\n**not extremely useful unless i wanted to add an example and have it appear with the component**\r\n\r\nstill haven\'t come across how to make the actual component code visible\r\n> (idk if i need it but i like to be able to if possible)\r\n\r\n#### [adding script tags, links and custom html](https://storybook.js.org/docs/react/configure/story-rendering#adding-to-head)   \r\n- .storybook/preview-head.html\r\n**adding to the head element**\r\n\r\n```\r\n  \x3c!-- .storybook/preview-head.html --\x3e\r\n\r\n  \x3c!-- Pull in static files served from your Static director or the internet --\x3e\r\n  <link rel=”preload” href=”your/font” />\r\n  \x3c!-- Or you can load custom head-tag JavaScript: --\x3e\r\n  <script src="https://use.typekit.net/xxxyyy.js"><\/script>\r\n  <script>try{ Typekit.load(); } catch(e){ }<\/script>\r\n```\r\n\r\n**adding to the body element**\r\n.storybook/preview-body.html\r\n\r\n```\r\n  \x3c!--  .storybook/preview-body.html --\x3e\r\n\r\n  <div id="custom-root"></div>\r\n```\r\n\r\n#### adding scss files\r\n  - i can\'t use style elements to add scss files but i can directly require scss files from anywhere in my dir hierarchy\r\n  - i want to set up a css folder with a style.scss file that i can use to add global styles to any .stories\r\n\r\n\r\n#### building helper components\r\n- it may help me display my components by building helper components that i can use to help trigger the target component\r\n\r\n\r\nto get the prop descriptions to show\r\n\r\n```\r\n  npm install -D babel-plugin-react-docgen\r\n```\r\n**failed - also needs to use a .babelrc file?**\r\n\r\nmain.js\r\n\r\n```\r\n  argTypes={{\r\n    message:{\r\n      control:{type:"text"},\r\n      description:"toast user message",\r\n      table: {type: {summary: \'text\', detail: \'something really really long\'}}\r\n    },\r\n    ...\r\n```\r\n\r\nto add better src code - use parameters prop in Story\r\n\r\n```\r\n  <Canvas>\r\n    <Story name="toast"\r\n      parameters={{docs: {\r\n        source: {code:"toaster({home, name, message, auto, sec}) \\n <Toast {...{name, message, auto, sec}} ></Toast>"}\r\n      }}}\r\n    >\r\n      {Template.bind({})}\r\n    </Story>\r\n  </Canvas>\r\n```\r\n\r\n#### [Hide NoControls warning](https://storybook.js.org/docs/react/essentials/controls#hide-nocontrols-warning)   \r\n>If you don\'t plan to handle the control args inside your Story, you can remove the warning with:\r\n\r\n```\r\n  // Button.stories.js\r\n\r\n  export const Large = Template.bind({});\r\n\r\n  Large.parameters = {\r\n  controls: { hideNoControlsWarning: true },\r\n  };\r\n```\r\n\r\n#### [Controlling a story\'s view mode](https://github.com/storybookjs/storybook/blob/master/addons/docs/docs/recipes.md#controlling-a-storys-view-mode)   \r\n- previewTabs property - can put docs tab before canvas tab\r\n- viewMode property - can determine which tab is always displayed when navigating back to a story\r\n\r\n```\r\n  <Canvas>\r\n    <Story name="Toast"\r\n      parameters={{docs: {\r\n        source: {code:`//triggered by an onClick event\r\n        const {toaster} = require(\'../../../xfiles/js/lib/elements/toaster/toaster\');\r\n        toaster({home, name, message, auto, sec});`}\r\n      },\r\n      viewMode: \'docs\',\r\n      previewTabs: { \'storybook/docs/panel\': { index: -1 } }\r\n      }}\r\n    >\r\n      {Template.bind({})}\r\n    </Story>\r\n  </Canvas>\r\n```\r\n\r\n\r\n#### [Publish Storybook](https://storybook.js.org/docs/react/workflows/publish-storybook)   \r\n[storybook deployer](https://github.com/storybookjs/storybook-deployer)   \r\n[Review with your team](https://storybook.js.org/docs/react/workflows/publish-storybook#review-with-your-team)\r\n> If you publish your Storybook to Chromatic, you can use the UI Review feature to automatically scan your PRs for new and updated stories. That makes it easy to identify what changed and give feedback.\r\n\r\n[what is chromatic](https://www.chromatic.com/features/publish)   \r\n\r\npublish storybook to github pages so it can exists in your repo\r\n\r\n[storybook codemods](https://github.com/storybookjs/storybook/blob/next/lib/codemod/README.md)   \r\n\r\n#### [theming](https://storybook.js.org/docs/react/configure/theming)   \r\n'))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"Storybook/Docs/Notes",parameters:{docs:{container:function container(_ref3){var children=_ref3.children,context=_ref3.context;return Object(esm.mdx)(blocks.DocsContainer,{context:context},Object(esm.mdx)("div",{style:{padding:"0 3rem"}},children))}}},includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(esm.mdx)(blocks.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(esm.mdx)(MDXContent,null))}});__webpack_exports__.default=componentMeta},1096:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(13),__webpack_require__(3),__webpack_require__(6),__webpack_require__(0);var esm=__webpack_require__(17),blocks=__webpack_require__(29);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(esm.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.mdx)(blocks.Meta,{title:"Storybook/Docs/publish",parameters:{docs:{container:function container(_ref2){var children=_ref2.children,context=_ref2.context;return Object(esm.mdx)(blocks.DocsContainer,{context:context,mdxType:"DocsContainer"},Object(esm.mdx)("div",{style:{padding:"0 3rem"}},children))}}},mdxType:"Meta"}),Object(esm.mdx)(blocks.Description,{mdxType:"Description"},'# Storybook\r\n\r\n### Publish\r\n\r\n<hr/>\r\n\r\n### Articles\r\n\r\n[Document for stakeholders](https://www.learnstorybook.com/design-systems-for-developers/react/en/document/)   \r\n\r\n[Publish Storybook - publish online](https://storybook.js.org/docs/react/workflows/publish-storybook#publish-storybook-online)   \r\n\r\n[storybookjs/storybook-deployer](https://github.com/storybookjs/storybook-deployer)   \r\n\r\n[github pages](https://pages.github.com/)   \r\n\r\n[Deploy Storybook to GitHub Pages](https://dev.to/kouts/deploy-storybook-to-github-pages-3bij)   \r\n\r\n> nope they ran me through a loop with adding github actions - i need a vanilla deployment and update\r\nthey almost seemed like the vanilla node way to do this.\r\n\r\n_? what is netlify?_\r\n\r\n[How to deploy Storybook to GitHub Pages](https://arminydy.medium.com/how-to-deploy-storybook-to-github-pages-4894097d49ab)   \r\n*-deplay using gh-pages-*\r\n\r\n> i think **this is the one**   \r\n> still a bit of magic, seemingly less magic, but magic all the same.   \r\n> i may eventually use this once i can ( do it the long way / understand it the long way )\r\n> it looks like this one doens\'t need its own repo. i can have a storybook separate from a repo and push to a "pages" branch\r\n\r\n[gh-pages cli package | npmjs.com](https://www.npmjs.com/package/gh-pages)   \r\n\r\n## Github pages\r\n\r\n#### github pages test 1\r\n\r\nHere i want an introduction to pages. w/o a template\r\n\r\ni want to:\r\n\r\n- make a new repo\r\n- turn on github pages\r\n- explore the default repository\r\n  - did it create a separate branch for gh pages?   \r\n    _yes it auto created **"gh-pages"** branch_\r\n  - is it running off a readme or did it create a separate index.html?   \r\n    _its running off a readme **"index.md"**_\r\n  - ~~what happens if i change the index.html file directly?~~   \r\n  _there is no .html file._\r\n\r\n#### examining the new gh-pages branch   \r\nIn the traditional way of using a repo and its branches i wanted to check the gh-pages branch in my new local repository.  but because the new branch is created after you clone the repo locally and then because github pages not only creates the new repo automatically but also forces you to do a 1st commit also remotely there were some challenges getting the local repo to match the new remote gh-pages branch.\r\n\r\n[get the remote branches](https://stackoverflow.com/questions/9537392/git-fetch-remote-branch)   \r\n\r\nto get a remote branch you have to create a local copy of the branch you want from the remote, then use it to track the remote branch\r\n\r\n> do use this method   \r\n\r\n```\r\n  git checkout --track origin/gh-pages\r\n```\r\n\r\n\r\n> this creates tracks and checks out the gh-pages remote branch\r\n\r\n[get all the remote branches](https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches)   \r\n\r\n> still a variation of the manual method above - just using a shell script to automate the process (uses a loop)   \r\n> **note:** this method is not as straight forward as the create/checkout/track/fetch all at once method above\r\n\r\n[get all the new remote files](https://stackoverflow.com/questions/37433814/git-fetch-not-working-for-fetch-new-files)   \r\n\r\n**GOTCHA: fatal: refusing to merge unrelated histories**\r\n[Git refusing to merge unrelated histories on rebase](https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase)   \r\n\r\ni ran this from the gh-pages branch\r\n\r\n```\r\n  // not needed:\r\n\r\n   git pull origin gh-pages --allow-unrelated-histories\r\n```\r\n\r\n> i won\'t need this step if i manually create and track the remote branch in the step above\r\n\r\n#### github pages test 2\r\n\r\nanother intro with a template   \r\n\r\n- make a new repo\r\n- turn on pages\r\n  - ~~how does the theme template interact with the .html or readme file?~~\r\n\r\n  _there is no default .html file, and all the pages are forced to have a theme template_   \r\n  _**also note:** the theme has no effect on your storybook upload_\r\n\r\n> i can\'t find anything that tells me how to properly add a storybook build to gh-pages so i will use the gh-pages cli method and reverse engineer it to see if i can at least describe how to do it manually   \r\n\r\n<br/>\r\n\r\n<hr/>\r\n\r\n### [gh-pages cli method](https://arminydy.medium.com/how-to-deploy-storybook-to-github-pages-4894097d49ab)   \r\n\r\n#### install gh-pages\r\n\r\n```\r\n  npm install gh-pages --save-dev\r\n\r\n  or\r\n\r\n  npm i gh-pages -D\r\n```\r\n\r\n#### open the package.json file and add the following code at the beginning of the file\r\n\r\n```\r\n  "homepage": "http://YOUR_GITHUB_USERNAME.github.io/REPO_NAME"\r\n```\r\n\r\nidk what would happen if you didn\'t add this homepage property to package.json\r\n\r\nnext add the following code to you package.json scripts tag\r\n\r\n```\r\n  "scripts": {\r\n    "predeploy": "npm run build-storybook",\r\n    "deploy-storybook": "gh-pages -d storybook-static",\r\n    "build-storybook": "build-storybook"\r\n  },\r\n```\r\n_build-storybook should actually already be there_\r\n\r\nin the interest of safety i ran the deploy-storybook and predeploy scripts indepedently of each other, ideally they should be a single script that waits for the first command to finish before running the 2nd command\r\n\r\n> afterward it took github a little time before it registered the changes but sure enough, gh-pages now shows my storybook\r\n\r\n#### storybook build test\r\n\r\n- what directory does sb build to by default running:\r\n\r\n```\r\n  npm run build-storybook\r\n```\r\nwithout any flags\r\n\r\n_storybook publishes to **"storybook-static"** by default_img_\r\n\r\n#### build to an alternative location\r\n\r\nuse the -o flag followed by the new binder path\r\n\r\n```\r\n    "scripts": {\r\n      "predeploy": "npm run build-storybook",\r\n      "deploy-storybook": "gh-pages -d storybook-static",\r\n      "build-storybook": "build-storybook -o dist"\r\n    },\r\n```\r\n\r\n_i just used **-o dist** (not ./dist or /dist)_\r\n\r\n#### Some other questions?\r\n\r\n- how can i make the 2 scripts one by running npm run deploy?   \r\n  _use the npm **pre[scriptName]** script hook_   \r\n  [Using npm pre- and post- hooks](https://medium.com/yld-blog/using-npm-pre-and-post-hooks-d89dcf2d86cf)   \r\n- if i publish from some other location (not the local repo connected to the remote) how will gh-pages know the remotes location?   \r\n  _**GOTCHA**: Failed to get remote.origin.url (task must either be run in a git repository with a configured origin remote or must be configured with the "repo" option)._   \r\n\r\n  > add the **--repo** flag with the repository\'s url\r\n\r\n#### using the pre hook and --repo flag from an alternate location:\r\n\r\n_package.json_\r\n\r\n```\r\n  "predeploy": "npm run build-storybook",\r\n  "deploy": "gh-pages -d storybook-static --repo https://github.com/YOUR_GITHUB_USERNAME/REPO_NAME",\r\n```\r\n\r\n#### publish in docs mode\r\n\r\n```\r\n  {\r\n  "scripts": {\r\n    "build-storybook-docs": "build-storybook --docs",\r\n  }\r\n}\r\n```\r\n'))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"Storybook/Docs/publish",parameters:{docs:{container:function container(_ref3){var children=_ref3.children,context=_ref3.context;return Object(esm.mdx)(blocks.DocsContainer,{context:context},Object(esm.mdx)("div",{style:{padding:"0 3rem"}},children))}}},includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(esm.mdx)(blocks.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(esm.mdx)(MDXContent,null))}});__webpack_exports__.default=componentMeta},1097:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(13),__webpack_require__(3),__webpack_require__(6),__webpack_require__(0);var esm=__webpack_require__(17),blocks=__webpack_require__(29);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(esm.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.mdx)(blocks.Meta,{title:"Storybook/Docs/Setup",parameters:{docs:{container:function container(_ref2){var children=_ref2.children,context=_ref2.context;return Object(esm.mdx)(blocks.DocsContainer,{context:context,mdxType:"DocsContainer"},Object(esm.mdx)("div",{style:{padding:"0 3rem"}},children))}}},mdxType:"Meta"}),Object(esm.mdx)(blocks.Description,{mdxType:"Description"},"# Storybook\r\n\r\n### Setup\r\n\r\n<hr/>\r\n<br/>\r\n\r\n#### install react & sass\r\ndependencies:\r\n\r\n```\r\n  npm i react react-dom sass\r\n```\r\n\r\n#### install and initialize storybook\r\n```\r\nnpx sb init\r\n```\r\n\r\n#### install dev dependencies\r\n```\r\n  npm i -D @storybook/addon-a11y @storybook/addon-console css-loader sass-loader style-loader\r\n```\r\n\r\n#### prep main.js   \r\n*_required for component based stories - otherwise optional_*   \r\n\r\n_main.js_   \r\n\r\n```\r\n  const path = require('path');\r\n  module.exports = {\r\n    \"stories\": [\r\n      \"../stories/**/*.stories.mdx\",\r\n      \"../stories/**/*.stories.@(js|jsx|ts|tsx)\"\r\n    ],\r\n    \"addons\": [\r\n      \"@storybook/addon-links\",\r\n      \"@storybook/addon-essentials\",\r\n      \"@storybook/addon-a11y\"\r\n    ],\r\n    webpackFinal: async (config, { configType }) => {\r\n      // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'\r\n      // You can change the configuration based on that.\r\n      // 'PRODUCTION' is used when building the static version of storybook.\r\n\r\n      // Make whatever fine-grained changes you need\r\n      config.module.rules.push({\r\n        test: /\\.scss$/,\r\n        use: ['style-loader', 'css-loader', 'sass-loader'],\r\n        include: path.resolve(__dirname, '../'),\r\n      });\r\n\r\n      // Return the altered config\r\n      return config;\r\n    },\r\n  }\r\n\r\n```\r\n**_webpackFinal makes it possible to use sass files in your stories_**\r\n\r\n#### prep preview.js   \r\n*_required for component based storie - otherwise optionals_*\r\n\r\n_preview.js_   \r\n\r\n```\r\n  import React from 'react';\r\n  import {addDecorator} from '@storybook/react';\r\n  import Center from '../stories/components/Center';\r\n  import {withConsole} from \"@storybook/addon-console\";// adds console logs to actions tab\r\n  import {withA11y} from '@storybook/addon-a11y';//  accessibility validator\r\n\r\n  // addDecorator(story => <Center>{story()}</Center>);// pre-themed\r\n  // addDecorator(story => <ThemeProvider theme={theme}><CSSReset />{story()}</ThemeProvider>);// example from the video\r\n  // addDecorator(story => <ChakraProvider>{story()}</ChakraProvider>);\r\n\r\n  export const parameters = {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    options: {\r\n      storySort: (a, b) =>\r\n        a[1].kind === b[1].kind ? 0 : a[1].id.localeCompare(b[1].id, undefined, { numeric: true }),\r\n    },\r\n  }\r\n\r\n  // sorts categories alphabetically\r\n\r\n  // v6 lets me use multiple decorators in an array of decorators - the theme is still not working\r\n  export const decorators = [\r\n    story => <Center>{story()}</Center>,\r\n    (story, context) => withConsole()(story)(context),\r\n    (story) => withA11y(story)\r\n  ]\r\n\r\n```\r\n\r\n#### [Controlling a story's view mode](https://github.com/storybookjs/storybook/blob/master/addons/docs/docs/recipes.md#controlling-a-storys-view-mode)   \r\n- previewTabs property - can put docs tab before canvas tab\r\n- viewMode property - can determine which tab is always displayed when navigating back to a story\r\n\r\n```\r\n  <Canvas>\r\n    <Story name=\"Toast\"\r\n      parameters={{\r\n        docs: {\r\n          source: {code:`//triggered by an onClick event\r\n          const {toaster} = require('../../../xfiles/js/lib/elements/toaster/toaster');\r\n          toaster({home, name, message, auto, sec});`}\r\n        },\r\n        viewMode: 'docs',\r\n        previewTabs: { 'storybook/docs/panel': { index: -1 } }\r\n      }}\r\n    >\r\n      {Template.bind({})}\r\n    </Story>\r\n  </Canvas>\r\n```\r\n> views can be controlled down to the individual stories. im sure i can move it to meta for global controls.\r\n\r\n#### create a components directory\r\n#### clone Center component [optional]\r\n#### clone css directory\r\n\r\n#### [Overwriting docs container](https://github.com/storybookjs/storybook/blob/master/addons/docs/docs/recipes.md#overwriting-docs-container)   \r\n> add this parameters prop to the meta tag\r\n\r\n```\r\n  parameters={{\r\n    docs: {\r\n      container: ({ children, context }) => (\r\n        <DocsContainer context={context}>\r\n            <div style={{padding: '0 3rem'}}>{children}</div>\r\n        </DocsContainer>\r\n      ),\r\n    }\r\n  }}\r\n```\r\n\r\n_meta tag example_\r\n\r\n```\r\n  import { Meta, Description, DocsContainer } from '@storybook/addon-docs/blocks';\r\n\r\n  ...\r\n\r\n  <Meta title=\"Storybook/Docs/Setup\"\r\n    parameters={{\r\n      docs: {\r\n        container: ({ children, context }) => (\r\n          <DocsContainer context={context}>\r\n              <div style={{padding: '0 3rem'}}>{children}</div>\r\n          </DocsContainer>\r\n        ),\r\n      },\r\n    }}\r\n   />\r\n```\r\n"))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"Storybook/Docs/Setup",parameters:{docs:{container:function container(_ref3){var children=_ref3.children,context=_ref3.context;return Object(esm.mdx)(blocks.DocsContainer,{context:context},Object(esm.mdx)("div",{style:{padding:"0 3rem"}},children))}}},includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(esm.mdx)(blocks.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(esm.mdx)(MDXContent,null))}});__webpack_exports__.default=componentMeta},478:function(module,exports,__webpack_require__){__webpack_require__(479),__webpack_require__(650),__webpack_require__(651),__webpack_require__(807),__webpack_require__(1025),__webpack_require__(1057),__webpack_require__(1062),__webpack_require__(1074),__webpack_require__(1076),__webpack_require__(1081),__webpack_require__(1083),module.exports=__webpack_require__(1087)},553:function(module,exports){},651:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(357)}},[[478,1,2]]]);
//# sourceMappingURL=main.36ecee2ba8a61c1212d6.bundle.js.map